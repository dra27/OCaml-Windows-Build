diff -Naur SpiderCaml-0.2/spiderCaml.ml SpiderCaml-0.2/spiderCaml.ml
--- SpiderCaml-0.2/spiderCaml.ml	2005-05-27 13:28:35.000000000 +0100
+++ SpiderCaml-0.2/spiderCaml.ml	2009-08-18 20:46:26.751187100 +0100
@@ -85,6 +85,7 @@
   external get_prop: Ctx.t -> t -> string -> t = "caml_js_get_prop"
   external set_elem: Ctx.t -> t -> int -> t -> unit = "caml_js_set_elem"
   external get_elem: Ctx.t -> t -> int -> t = "caml_js_get_elem"
+  external enumerate: Ctx.t -> t -> t list = "caml_js_enumerate"
   external create: Ctx.t -> ?proto:t -> ?parent:t -> 
     objops option -> t = "caml_js_new_object"
 
@@ -119,6 +120,7 @@
   method get n = new jsobj cx (Val.get_prop cx o n)
   method set_idx n (v : jsobj) = Val.set_elem cx o n (v#v)
   method get_idx n = new jsobj cx (Val.get_elem cx o n)
+  method enumerate = List.map (fun v -> new jsobj cx v) (Val.enumerate cx o)
 
   method new_object_gen ?proto ?parent ?active () =
     let proto = 
diff -Naur SpiderCaml-0.2/spiderCaml.mli SpiderCaml-0.2/spiderCaml.mli
--- SpiderCaml-0.2/spiderCaml.mli	2005-05-27 14:13:47.000000000 +0100
+++ SpiderCaml-0.2/spiderCaml.mli	2009-08-18 19:38:10.318793200 +0100
@@ -68,6 +68,11 @@
     (** Set the value of a numeric property.  Raise [InvalidType]
 	if the value is not an object. *)
 
+  method enumerate : jsobj list
+    (** Return all the enumerable properties of this object (but
+  not any from the prototype).  Raise [InvalidType] if the value
+  is not an object. *)
+
   (** Creation of values. *)
 
   method new_child : ?proto:jsobj -> ?active:(jsobj active) -> unit -> jsobj
diff -Naur SpiderCaml-0.2/spiderCaml_stubs.c SpiderCaml-0.2/spiderCaml_stubs.c
--- SpiderCaml-0.2/spiderCaml_stubs.c	2005-05-27 14:08:22.000000000 +0100
+++ SpiderCaml-0.2/spiderCaml_stubs.c	2009-08-18 19:51:55.186641700 +0100
@@ -585,8 +585,29 @@
   CAMLreturn(jsval_to_caml(rt,ret));
 }
 
-
-
+CAMLprim value caml_js_enumerate(value cx, value obj){
+  CAMLparam2(cx,obj);
+  CAMLlocal2(res,elt);
+  JSContext *ctx = get_ctx(cx);
+  JSRuntime *rt = JS_GetRuntime(ctx);
+  JSIdArray *props = JS_Enumerate(ctx, unwrap_obj(rt,obj));
+  jsval val;
+  jsid *ptr, *head;
+  res = Val_int(0);
+  head = ptr = props->vector;
+  ptr += (props->length - 1);
+  while (ptr >= head) {
+    if (JS_IdToValue(ctx,*ptr,&val)) {
+      elt = res;
+      res = caml_alloc(2,0);
+      Store_field(res, 0, jsval_to_caml(rt,val));
+      Store_field(res, 1, elt);
+    }
+    ptr--;
+  }
+  JS_DestroyIdArray(ctx, props);
+  CAMLreturn(res);
+}
 
 
 CAMLprim value caml_js_new_object(value cx, value proto, value parent, value ops){
