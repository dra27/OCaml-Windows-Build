diff -Naur SpiderCaml-0.2/spiderCaml.ml SpiderCaml-0.2.new/spiderCaml.ml
--- SpiderCaml-0.2/spiderCaml.ml	2009-08-21 18:02:00.025087000 +0100
+++ SpiderCaml-0.2.new/spiderCaml.ml	2009-08-21 17:54:16.381073600 +0100
@@ -37,6 +37,9 @@
   external set_version: t -> int -> unit = "caml_js_set_version"
 end
 
+type jsid = int32
+type jstype = Void | Object | Function | String | Number | Boolean | Null
+
 module Val = struct
   type t = jsval
   external runtime: t -> Rt.t = "caml_js_rt_of_value"
@@ -46,6 +49,10 @@
   external string: Ctx.t -> string -> t = "caml_js_new_string"
   external float: Ctx.t -> float -> t = "caml_js_new_double"
 
+  external id : Ctx.t -> t -> int32 = "caml_js_id"
+  external equal: Ctx.t -> t -> t -> bool = "caml_js_equal"
+  external getclass: Ctx.t -> t -> string option = "caml_js_getclass"
+
   external to_string: Ctx.t -> t -> string = "caml_js_to_string"
   external to_object: Ctx.t -> t -> t = "caml_js_to_object"
   external to_bool: Ctx.t -> t -> bool = "caml_js_to_bool"
@@ -73,6 +80,7 @@
   external is_double: Ctx.t -> t -> bool = "caml_js_is_double"
   external is_array: Ctx.t -> t -> bool = "caml_js_is_array"
 
+  external typeof: Ctx.t -> t -> jstype = "caml_js_typeof"
   external get_boolean: Ctx.t -> t -> bool = "caml_js_get_boolean"
   external get_int: Ctx.t -> t -> int = "caml_js_get_int"
   external get_string: Ctx.t -> t -> string = "caml_js_get_string"
@@ -116,6 +124,11 @@
 
 class jsobj cx o = object(this:'this)
   method v = o
+
+  method equals (v : jsobj) = Val.equal cx o (v#v)
+  method id = Val.id cx o
+  method class_name = Val.getclass cx o
+
   method set n (v : jsobj) = Val.set_prop cx o n (v#v)
   method get n = new jsobj cx (Val.get_prop cx o n)
   method set_idx n (v : jsobj) = Val.set_elem cx o n (v#v)
@@ -175,6 +188,7 @@
   method is_float = Val.is_double cx o
   method is_array = Val.is_array cx o
 
+  method classify = Val.typeof cx o
   method get_bool = Val.get_boolean cx o
   method get_int = Val.get_int cx o
   method get_string = Val.get_string cx o
@@ -196,3 +210,70 @@
 					      (mkobjops (new jsobj) active))
 
 external implementation_version: unit -> string = "caml_js_implementation_version"
+
+module JSSet = Set.Make(struct type t = jsid let compare = compare end)
+
+let jsobj_printer f (v : jsobj) =
+  let inspect v =
+    let rec inspect s v =
+      if JSSet.mem v#id s
+      then "..."
+      else if v#is_array
+           then let length = (v#get "length")#get_int
+                in
+                  let rec buildList n acc =
+                    if n < length
+                    then buildList (succ n) ((inspect (JSSet.add v#id s) (v#get_idx n))::acc)
+                    else acc
+                  in
+                    Printf.sprintf "[%s]" (String.concat ", " (buildList 0 []))
+           else if v#is_int
+                then let n = v#get_int in Printf.sprintf "%d (0x%x)" n n
+                else let classification = v#classify
+                     in
+                       match classification with
+                         Void     -> "undefined"
+                       | Object
+                       | Function ->
+                           let prefix =
+                             let prefix =
+                               if classification = Function
+                               then "(function) "
+                               else ""
+                             in
+                               match v#class_name with
+                                 Some name when name <> "Function" ->
+                                   Printf.sprintf "%s<%s> " prefix name
+                               | _ ->
+                                   prefix
+                           in
+                             let rec buildList acc props =
+                               match props with
+                                 prop::props ->
+                                   let prop =
+                                     if prop#is_string
+                                     then let prop = prop#get_string
+                                          in
+                                            let prn =
+                                              try
+                                                ignore (int_of_string prop);
+                                                Printf.sprintf "'%s'" prop
+                                              with _ -> prop
+                                            in
+                                              Printf.sprintf "%s: %s" prn (inspect (JSSet.add v#id s) (v#get prop))
+                                     else let prop = prop#get_int
+                                          in
+                                            Printf.sprintf "%d: %s" prop (inspect (JSSet.add v#id s) (v#get_idx prop))
+                                   in
+                                     buildList (prop::acc) props
+                               | []          -> acc
+                             in
+                               Printf.sprintf "%s{%s}" prefix (String.concat ", " (buildList [] (List.rev v#enumerate)))
+                       | String   -> Printf.sprintf "'%s'" v#get_string
+                       | Number   -> Printf.sprintf "%f" v#get_float
+                       | Boolean  -> Printf.sprintf "%b" v#get_bool
+                       | Null     -> "null"
+    in
+      inspect JSSet.empty v
+  in
+    Format.fprintf f "%s" (inspect v);;
diff -Naur SpiderCaml-0.2/spiderCaml.mli SpiderCaml-0.2.new/spiderCaml.mli
--- SpiderCaml-0.2/spiderCaml.mli	2009-08-21 18:02:00.025087000 +0100
+++ SpiderCaml-0.2.new/spiderCaml.mli	2009-08-21 18:04:29.214948100 +0100
@@ -24,6 +24,17 @@
 type jsval
   (** Internal use. *)
 
+type jsid
+  (** JavaScript value identifiers. *)
+
+type jstype = Void
+            | Object
+            | Function
+            | String
+            | Number
+            | Boolean
+            | Null
+
 type 'a active = {
   setter: string -> 'a -> 'a;
   getter: string -> 'a -> 'a;
@@ -52,6 +63,18 @@
 	object.
 	Raise [InvalidType] if the value is not an object. *)
 
+  method equals : jsobj -> bool
+    (** Physical equality of JavaScript values. *)
+
+  method class_name : string option
+    (** Returns the class name of this object if it has one.
+  Raise [InvalidType] if the value is not an object. *)
+
+  method id : jsid
+    (** An id which can be used to index [jsobj] values. Two [jsobj]
+  values are guaranteed to have the same [id] if they physically
+  the same value. *)
+
   (** Access to properties. *)
 
   method get : string -> jsobj
@@ -117,6 +140,9 @@
   method is_float : bool
   method is_array : bool
 
+  method classify : jstype
+    (** Returns the classification of this object. *)
+
   method get_int : int
     (** Raise [InvalidType] is the value is not an integer. *)
   method get_bool : bool
@@ -162,6 +188,9 @@
   method v : jsval
 end
 
+val jsobj_printer : Format.formatter -> jsobj -> unit
+  (** Toploop printer for JavaScript values. *)
+
 val new_global_obj : ?active:(jsobj active) -> unit -> jsobj
   (** Create a new global object. *)
 
diff -Naur SpiderCaml-0.2/spiderCaml_stubs.c SpiderCaml-0.2.new/spiderCaml_stubs.c
--- SpiderCaml-0.2/spiderCaml_stubs.c	2009-08-21 18:02:00.025087000 +0100
+++ SpiderCaml-0.2.new/spiderCaml_stubs.c	2009-08-21 17:32:53.116821000 +0100
@@ -504,6 +504,18 @@
 tester_getter(string,JSVAL_IS_STRING,JSVAL_TO_STRING,jsstring_to_caml);
 tester_getter(double,JSVAL_IS_DOUBLE,JSVAL_TO_DOUBLE,jsdouble_to_caml);
 
+CAMLprim value caml_js_typeof(value cx, value v){
+  CAMLparam2(cx,v);
+  JSContext *ctx = get_ctx(cx);
+  JSRuntime *rt = JS_GetRuntime(ctx);
+  jsval jv = caml_to_jsval(rt,v);
+  JSType res = JSTYPE_NULL;
+  if (!JSVAL_IS_NULL(jv))
+    res = JS_TypeOfValue(ctx,jv);
+  CAMLreturn(Val_int(res));
+}
+  
+
 #define wrap_obj(rt,o) jsval_to_caml(rt,OBJECT_TO_JSVAL(o))
 
 CAMLprim value caml_js_to_object(value ctx, value v){
@@ -523,6 +535,21 @@
   else { raise_constant(*caml_named_value("js invalid type")); }  
 }
 
+CAMLprim value caml_js_getclass(value ctx, value v){
+  CAMLparam2(ctx,v);
+  CAMLlocal1(res);
+  JSContext *cx = get_ctx(ctx);
+  JSRuntime *rt = JS_GetRuntime(cx);
+  char *name = JS_GET_CLASS(cx,unwrap_obj(rt,v))->name;
+  if (name == NULL)
+    res = Val_int(0); // None constructor
+  else {
+    res = caml_alloc(1, 0); // Some constructor
+    Store_field(res, 0, caml_copy_string(name));
+  }
+  CAMLreturn(res);
+}
+
 CAMLprim value caml_js_get_global_object(value cx) {
   CAMLparam1(cx);
   JSContext *ctx = get_ctx(cx);
@@ -585,6 +612,22 @@
   CAMLreturn(jsval_to_caml(rt,ret));
 }
 
+CAMLprim value caml_js_id(value cx, value obj){
+  CAMLparam2(cx,obj);
+  JSContext *ctx = get_ctx(cx);
+  JSRuntime *rt = JS_GetRuntime(ctx);
+  CAMLreturn(caml_copy_int32((int)caml_to_jsval(rt,obj)));
+}
+
+CAMLprim value caml_js_equal(value cx, value left, value right){
+  CAMLparam3(cx,left,right);
+  JSContext *ctx = get_ctx(cx);
+  JSRuntime *rt = JS_GetRuntime(ctx);
+  jsval jleft = caml_to_jsval(rt,left);
+  jsval jright = caml_to_jsval(rt,right);
+  CAMLreturn(Val_bool(jleft == jright));
+}
+
 CAMLprim value caml_js_enumerate(value cx, value obj){
   CAMLparam2(cx,obj);
   CAMLlocal2(res,elt);
